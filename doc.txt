to make a new project: 
django-admin startporject <projectname>

common commandos:
python manage.py runserver   # Start development server
python manage.py migrate     # Apply migrations
python manage.py createsuperuser  # Create admin user

-Migrations in Django are a way to propagate changes you make to your database 
schema (like creating tables, 
adding fields, or deleting models) in a structured and version-controlled manner.


 Djungo restAPI framework: simplify the process of converting your Django models into APIs.

 Serializers (=translator, like djngo forms but for APIes) are responsible for 
 converting complex data types, like Django models or querysets, into JSON (or other formats like XML) and vice versa. 
 Another task is to validate incoming data. 
to types:
1-Serializer Class: Manual and flexible. You define every field explicitly.
2-ModelSerializer Class: Automatically generates fields based on a Django model, saving time.

Views (ViewSets) (= the controllers or the logic handlers)
They decide what to do with a request.
types of ViewSets in DRF:
ViewSet ‚Äì Basic, flexible view handling but requires you to define each action.
ModelViewSet ‚Äì Provides all default CRUD operations (list, create, retrieve, update, destroy).
ReadOnlyModelViewSet ‚Äì Provides only list and retrieve (read-only API).

What is urls.py in Django? (Simple Explanation)
In Django, urls.py is used to connect a URL (web address) to a function or view.
This tells Django what to do when a user visits a specific webpage.
Each URL needs a function in views.py to handle the request.

A Django project is the whole application (like a website).
A Django app is a modular part of the project (like a "users" app, "blog" app, etc.).


Feature	Project                                 urls.py	             App urls.py
Handles global routing (entry point) ?	         ‚úÖ Yes               ‚ùå No 
Includes URLs from apps?	                     ‚úÖ Yes (include())	 ‚ùå No
Contains specific API endpoints?                 ‚ùå No	             ‚úÖ Yes
Keeps project modular?	                         ‚úÖ Yes	             ‚úÖ Yes


üîπ What‚Äôs the Difference Between Django Forms and DRF?
Feature	             Traditional Django Forms	            Django REST Framework (DRF) API
How Data is Sent	 Form submitted via HTML (POST)	         JSON request (POST)
Response Type	     Redirects user to a new page	         Returns JSON response
Use Case	         Web applications (Django templates)	 APIs for React, mobile apps, etc.
Authentication	     Django‚Äôs session-based login	         Token or JWT authentication


üí° Most modern applications use Django REST Framework (DRF) because: 
‚úÖ It works with mobile apps, frontend frameworks (React, Vue, Angular).
‚úÖ It separates frontend and backend, making development more flexible.
‚úÖ It supports microservices and third-party integrations (e.g., Stripe, Google OAuth).



CORS and CSRF;

Cross-Origin Resource Sharing: allow comunication between servers (for ex frontend to/from backend)

JWT (JSON Web Token):
a way to securely transmit information between a client (browser, mobile app) and a server without needing sessions or cookies.
What is JWT?
‚úÖ A digitally signed token (like a passport) that proves identity.
‚úÖ Used for authentication (login/logout).
‚úÖ Stateless (server doesn‚Äôt need to store user sessions).
‚úÖ Can be used for authorization (deciding what users can access).
how works:
1Ô∏è‚É£ User logs in ‚Üí Credentials (username/password) are sent to the server.
2Ô∏è‚É£ if user found, Server generates a JWT ‚Üí Encodes user data into the token (header.payload.signature).
3Ô∏è‚É£ JWT is sent back ‚Üí Stored in LocalStorage, SessionStorage, or HttpOnly cookie.
4Ô∏è‚É£ Frontend manually sends JWT in the Authorization header (Bearer <token>).
5Ô∏è‚É£ Server verifies JWT without checking a database.
6Ô∏è‚É£ User logs out ‚Üí Frontend deletes JWT, but token is still valid until it expires.

‚úÖ Pros:

Faster & scalable (no session storage needed).
Works with APIs & microservices.
Easier cross-domain authentication (used in mobile & SPA apps).
‚ùå Cons:

If stored in LocalStorage, XSS attacks can steal the token.
Token revocation is difficult (must wait for expiration or use a blacklist).
Larger payload (extra metadata in token).